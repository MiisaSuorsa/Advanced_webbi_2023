Todo app with back-end
This week's assignment is to build a todo app. It is done by using Node.js and Express.js and a view engine of your choice.

Note: Now that you are familiarized in the Node/Express environment, you can generate the server using Express generator, that can be used with npx. npx is a program to execute commands.  Install npx with command npm install -g npx , and generate Express App using Express generator.

Note #2: For this week's exercises, we are going to use a view engine. One can be easily installed by using the view -handle in the npx command. For example, pug can be installed with npx express-generator --view=pug Make sure that your submission doesn't contain any .html files!!!

After this week it is optional to use view engines. If you do not want to use server-side view engines, run npx express-generator --no-view inside a folder where you want the project be in.

Requirements and Scoring
1. Render a site
Create an index page that has the text My todos somewhere on the page.

2. Save users to server
Create an input field with the id of input-name and an input field with the id of input-task and a button with an id of submit-data. After clicking the button, the front-end should send the name and todo to the POST route "/todo" and the server should save this data for example in an array of objects.

Example of how the data could be stored:

[
    {
        name: "Jukka",
        todos: ["Eat", "Sleep", "Repeat"]
    }
]
If the server already has stored the name the client sent to the server, the server shouldn't make a new entry but rather find the object and append the task the client sent to the list.

If a new user was added, the server should sent "User added" back to the client. If a task was added to an existing client, the server should respond with "Todo added". The client should display these messages accordingly.

3. Fetch users
The client should be able to fetch users and their todos based on their name. Create a GET route to "/user/:id". and Add an input field with an id of search-name and a button with an id of search . Upon pressing the search button, the client sends a get request to "/user/:id" route (for example "/user/jukka") and the server tries to respond with the name and todos of the user. If the user is not found, the server should respond with "User not found".

After the request is done, the client should display the name and todos of the queried user on the website. If the user is not found, the client should display the appropriate message instead.

4. Delete users
If a user is found, a button with an id of delete-user should appear. After this button is pressed, it should make a DELETE request to "/user/:id" route. The backend should try to delete the user based on the name the client sent to the server in the id section of the URL. If the deletion is successful, the server should respond with "User deleted". However, if the operation is unsuccessful, the server should respond with "User not found".  If the operation is successful, the user shouldn't be displayed on the website anymore. Whether or not the operation was successful, the message the server sent should be displayed regardless.

5. Delete todos
The client should be able to delete singular todos. After searching for a user, the client should have clickable elements (buttons or the todos themselves, for example) with a class of delete-task . You should display as many of these elements as there are todos, and clicking on one of the elements would remove a corresponding todo (for example, clicking on the 3th elements would remove the 3th todo). When an element is clicked, the client should send a PUT request to "/user" and the data should be sent in the request body. After this the backend should try to find the user and delete the right todo.

If the task is successful, the server should respond with "Task deleted" and if not, the server should respond with a message "User not found" 
